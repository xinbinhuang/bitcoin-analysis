abline(v = 12, lwd = 2)
abline(v = median(gapminder$lifeExp), col = "magneta", lwd = 4)
hist(gapminder$lifeExp, col = "green")
abline(v = 12, lwd = 2)
abline(v = median(gapminder$lifeExp), col = "magenta", lwd = 4)
boxplot(gapminder$lifeExp, col = "blue")
abline(h = 75 )
hist(gapminder$lifeExp, col = "green")
abline(v = 65, lwd = 2)
abline(v = median(gapminder$lifeExp), col = "magenta", lwd = 4)
boxplot(gapminder$lifeExp, col = "blue")
abline(h = 75 )
hist(gapminder$lifeExp, col = "green")
abline(v = 75, lwd = 2)
abline(v = median(gapminder$lifeExp), col = "magenta", lwd = 4)
barplot(table(gapminder$continent, col = "wheat", main = ))
barplot(table(gapminder$continent, col = "wheat", main = ""))
barplot(table(gapminder$continent), col = "wheat", main = ""))
barplot(table(gapminder$continent), col = "wheat", main = "")
table(gapminder$continent)
barplot(table(gapminder$continent), col = "wheat", main = "Number of records in each continent")
?model.matrix
circle_layer <- function(x0, y0, r, npoints=100, ...) {
angles <- seq(-pi, pi, length.out=npoints)
x <- sin(angles) * r
y <- cos(angles) * r
circdat <- data.frame(x=x+x0, y=y+y0)
geom_polygon(data=circdat,
mapping=aes(x, y),
alpha=0,
colour="black",
...)
}
circle_layer()
circle_layer
install.packages("car")
#Two-way ANOVA table
summary(aov(assessment_k~age_factor*FIREPLACE,data=dat.balanced))
matrix(c(rep(0,3),1),2,2)
matrix(c(rep(0,3),1),2,2)
library(dplyr)
library(ggplot2)
library(cowplot)
library(tidyverse)
library(broom)
theme_set(theme_bw())
#Projection
A <- matrix(c(1,2,1,4,0,5),3,2,byrow=T)
Px <- matrix(c(rep(0,3),1),2,2)
A%*%Px
Py <- matrix(c(1,rep(0,3)),2,2)
A%*%Py
Px
A
Py
B
a
A
install.packages("emmeans")
knitr::opts_chunk$set(message = FALSE)
library(dplyr)
library(ggplot2)
library(cowplot)
library(tidyverse)
library(broom)
theme_set(theme_bw())
dat<-read.csv("dataPropTaxAssess.csv")
# Add age of property
dat$age<-2017-as.numeric(dat$YEAR_BUILT)
dat$age_factor <- cut(dat$age,c(0,17,37,120),labels=c("C","M","O"))
dat <- dat %>% mutate(assessment_k = ASSESSMENT / 1000)
dat %>% select(age_factor) %>% summary
dat %>% group_by(age_factor) %>% summarize(avg_assessment=mean(ASSESSMENT))
#Small dataframe, unbalanced, and a few properties per group for illustration
dat.small.C<-dat %>% filter(age_factor=="C")
dat.small.M<-dat %>% filter(age_factor=="M")
dat.small.O<-dat %>% filter(age_factor=="O")
set.seed(123)
dat.small<-rbind(dat.small.C[sample(1:nrow(dat.small.C),5),],
dat.small.M[sample(1:nrow(dat.small.M),15),],
dat.small.O[sample(1:nrow(dat.small.O),50),])
#Some summaries
dat.small %>% group_by(age_factor) %>% summarize(avg_assessment=mean(assessment_k))
dat %>% select(age_factor) %>% summary
dat %>% group_by(age_factor) %>% summarize(avg_assessment=mean(assessment_k))
#Plot of means (check the differences in the y-axes)
g1<-ggplot(data=dat.small,aes(age_factor, assessment_k, color = age_factor)) +
stat_summary(fun.y = "mean", size = 2, geom = "point",aes(color = age_factor))+
coord_cartesian(ylim = c(180, 1050))+
theme(legend.position = "none")
g2<-ggplot(data=dat.small,aes(age_factor, assessment_k, color = age_factor)) +
stat_summary(fun.y = "mean", size = 2, geom = "point",aes(color = age_factor))+
#coord_cartesian(ylim = c(180, 1050))+
theme(legend.position = "none")
plot_grid(g1, g2, align = "h")
#Comparison of densities
#a) small variance
g_sv<-ggplot(data.frame(x = c(-5, 15)), aes(x)) +
stat_function(fun = dnorm,color="red")+
stat_function(fun = dnorm,args = list(mean = 5),color="blue")+
stat_function(fun = dnorm,args = list(mean = 10))+labs(x = "",y="")
#b) large variance
g_lv<-ggplot(data.frame(x = c(-85, 95)), aes(x)) +
stat_function(fun = dnorm,args = list(mean = 0,sd=30),color="red")+
stat_function(fun = dnorm,args = list(mean = 5,sd=30),color="blue")+
stat_function(fun = dnorm,args = list(mean = 10,sd=30))+labs(x = "",y="")
plot_grid(g_sv, g_lv, align = "h")
#Boxplots
g<-ggplot(data=dat.small,aes(age_factor, assessment_k, color = age_factor)) +
geom_boxplot(outlier.shape = NA)+ theme(legend.position = "none")
g
#Add data points
g+geom_jitter(position = position_jitter(width  = .2),aes(color=age_factor))+
theme(legend.position = "none")
#Data with mean
g1<-ggplot(data=dat.small,aes(age_factor, assessment_k, color = age_factor)) +
geom_jitter(position = position_jitter(width  = .2),aes(color=age_factor))+
stat_summary(fun.y = "mean", size = 3, shape=2,geom = "point",aes(color = age_factor))+
theme(legend.position = "none")
#Add overall mean
g2<-g1+geom_hline(aes(yintercept = mean(dat.small$assessment_k)),)
plot_grid(g1, g2, align = "h")
#t-test vs ANOVA in a 2-groups analysis
#responses within each group
tax.M <-dat.small %>% subset(age_factor =="M", select=assessment_k)
tax.C <-dat.small %>% subset(age_factor =="C", select=assessment_k)
tt.2<-t.test(tax.M,tax.C,var.equal=T)
tt.2
#subset of 2 age periods
summary(aov(assessment_k~age_factor,data=subset(dat.small,age_factor %in% c("M","C"))))
#ANOVA table for a 3-groups analysis
summary(aov(assessment_k~age_factor,data=dat.small))
# NOTE that t^2=F
tt.2$statistic^2
#Linear regression
#LM with 2 age periods
summary(lm(assessment_k~age_factor,data=subset(dat.small,age_factor %in% c("M","C"))))
#More than 2 groups
#ANOVA with 3 age periods
summary(aov(assessment_k~age_factor,data=dat.small))
#LM with 3 age periods
summary(lm(assessment_k~age_factor,data=dat.small))
#Multiplication
A <- matrix(c(1, 2 , 1,4 , 0,5),3,2,byrow=T)
B <- matrix(c(-1, -2 , -2,1),2,2,byrow=T)
A%*%B
#Note: A%*%B is not the same as A*B
#Inverse
A <- matrix(c(7, 2 , 1,0 , 3 ,-1, -3, 4 , -2),3,3,byrow=T)
solve(A)
#Projection
A <- matrix(c(1,2,1,4,0,5),3,2,byrow=T)
Px <- matrix(c(rep(0,3),1),2,2)
A%*%Px
Py <- matrix(c(1,rep(0,3)),2,2)
A%*%Py
#A line
set.seed(1234)
x<-rnorm(10)
y<-2*x+1
example.line<-data.frame(x=x,y=y)
g<-ggplot(example.line, aes(x,y))+geom_point()+geom_abline(slope=2, intercept = 1, color="red")+
geom_vline(xintercept = 0,color="grey",linetype = "dashed")+
geom_hline(yintercept = 0,color="grey",linetype = "dashed")
g+geom_segment(x=example.line[1,1],xend=example.line[1,1],y=example.line[1,2],yend=-4,
color="purple",linetype = "dashed",size=0.05)+
geom_segment(x=example.line[2,1],xend=example.line[2,1],y=example.line[2,2],yend=-4,
color="purple",linetype = "dashed",size=0.05)+
geom_segment(x=-3,xend=example.line[1,1],y=example.line[1,2],yend=example.line[1,2],
color="purple",linetype = "dashed",size=0.05)+
geom_segment(x=-3,xend=example.line[2,1],y=example.line[2,2],yend=example.line[2,2],
color="purple",linetype = "dashed",size=0.05)+
annotate("text", x = 0.55, y = 1.4, size=3,label = "(.28,1.56)")+
annotate("text", x = -1.5, y = -1.1,size=3, label = "(-1.21,-1.42)")+
annotate("text", x = -.5, y = 1,size=3, label = "y=2*x+1",color="red")
#Use a random sample of 500 residencies in the dataset, 2 age periods
set.seed(12134)
dat.rs<-dat[sample(1:nrow(dat),500),]
dat.2<-dat.rs %>% filter(age_factor%in%c("C","O"))
dat.2 %>% count(age_factor,FIREPLACE)
#Include "FIREPLACE" (="Y" if the property has a fireplace) in the model
g_fire<-ggplot(data=dat.2,aes(FIREPLACE, assessment_k, color = FIREPLACE)) +
geom_boxplot()+
scale_color_manual(values=c("#E69F00", "#56B4E9"))+
theme(legend.position = "none")
g_age<-ggplot(data=dat.2,aes(age_factor, assessment_k, color = age_factor)) +
geom_boxplot()+
theme(legend.position = "none")
plot_grid(g_age, g_fire, align = "h")
# Interaction plot
g<-ggplot(data = dat.2,
aes(age_factor, assessment_k, color = FIREPLACE, group=FIREPLACE)) +
stat_summary(fun.y=mean, geom="point")+scale_colour_brewer(palette="Paired")+
stat_summary(fun.y=mean, geom="line")
g
#create a balanced dataset:
dat.CY<-dat %>% filter(age_factor=="C"&FIREPLACE=="Y")
dat.CN<-dat %>% filter(age_factor=="C"&FIREPLACE=="N")
dat.OY<-dat %>% filter(age_factor=="O"&FIREPLACE=="Y")
dat.ON<-dat %>% filter(age_factor=="O"&FIREPLACE=="N")
set.seed(123)
dat.balanced<-rbind(dat.CY[sample(1:nrow(dat.CY),100),],
dat.CN[sample(1:nrow(dat.CN),100),],
dat.OY[sample(1:nrow(dat.OY),100),],
dat.ON[sample(1:nrow(dat.ON),100),])
#Two-way ANOVA table
summary(aov(assessment_k~age_factor*FIREPLACE,data=dat.balanced))
#order of factors does NOT matter in THIS case
summary(aov(assessment_k~FIREPLACE*age_factor,data=dat.balanced))
summary(aov(assessment_k~age_factor,data=dat.balanced))
#summary(aov(assessment_k~FIREPLACE,data=dat.balanced))
#marginal means of A
means_A<-dat.balanced %>% group_by(age_factor)%>%
summarize(avg_assessment=mean(assessment_k)) %>%
select(avg_assessment)%>% unlist %>% as.numeric
#marginal means of B
means_B<-dat.balanced %>% group_by(FIREPLACE)%>%
summarize(avg_assessment=mean(assessment_k)) %>%
select(avg_assessment)%>% unlist %>% as.numeric
#overall mean
mean_all<-mean(dat.balanced$assessment_k)
mean_all
#means of marginal means equals the overall mean! this makes the magic!
mean(means_A)
mean(means_B)
#number of levels of each group
a<-2 #(2 age levels)
b<-2 #(FIREPLACE Y vs N)
#number of observations per group
M<-100
#SS(A): compare with ANOVA table
b*M*sum((means_A-mean_all)^2)
#SS(B): compare with ANOVA table
a*M*sum((means_B-mean_all)^2)
summary(lm(assessment_k~age_factor*FIREPLACE,data=dat.balanced))
#order doesn't matter (uncomment the second line to check)
#summary(lm(assessment_k~FIREPLACE*age_factor,data=dat.balanced))
library(lsmeans)
lm_AB<-lm(assessment_k~age_factor*FIREPLACE,data=dat.balanced)
means.ab <- lsmeans(lm_AB, specs = c("age_factor", "FIREPLACE"))
means.a <- lsmeans(lm_AB, specs = c("age_factor"))
means.b <- lsmeans(lm_AB, specs = c("FIREPLACE"))
contrast(means.ab, list(CvOforN=c(1,-1,0,0),CvO = c(.5,-.5,.5,-.5)))
#create an unbalanced dataset with 2 factors:
set.seed(12134)
dat.rs<-dat[sample(1:nrow(dat),400),]
dat.2<-dat.rs %>% filter(age_factor%in%c("C","O"))
summary(aov(assessment_k~age_factor*FIREPLACE,data=dat.2))
#order DOES matter in THIS case (except for the interaction term)
summary(aov(assessment_k~FIREPLACE*age_factor,data=dat.2))
#Compare the SS(A) and SS(B) of the 2-way and those of the 1-way ANOVA tables
summary(aov(assessment_k~age_factor,data=dat.2))
summary(lm(assessment_k~FIREPLACE,data=dat.2))
#marginal means of A
means_A<-dat.2 %>% group_by(age_factor)%>%
summarize(avg_assessment=mean(assessment_k)) %>%
select(avg_assessment)%>% unlist %>% as.numeric
#marginal means of B
means_B<-dat.2 %>% group_by(FIREPLACE)%>%
summarize(avg_assessment=mean(assessment_k)) %>%
select(avg_assessment)%>% unlist %>% as.numeric
#overall mean
mean_all<-mean(dat.2$assessment_k)
mean_all
#means of marginal means are now NOT equals the overall mean!
mean(means_A)
mean(means_B)
#number of levels of each group
a<-2 #(2 age levels)
b<-2 #(FIREPLACE Y vs N)
#number of observations per levels of factors
n_C.<-count(dat.2 %>% filter(age_factor=="C"))
n_O.<-count(dat.2 %>% filter(age_factor=="O"))
size_A<-as.numeric(c(n_C.,n_O.))
n_.Y<-count(dat.2 %>% filter(FIREPLACE=="Y"))
n_.N<-count(dat.2 %>% filter(FIREPLACE=="N"))
size_B<-as.numeric(c(n_.N,n_.Y))
#SS(A): compare with ANOVA table(s)
sum(((means_A-mean_all)^2)*size_A)
#SS(B): compare with ANOVA table(s)
sum(((means_B-mean_all)^2)*size_B)
summary(lm(assessment_k~age_factor*FIREPLACE,data=dat.2))
#order doesn't matter here (uncomment the second line to check)
#summary(lm(assessment_k~FIREPLACE*age_factor,data=dat.balanced))
library(lsmeans)
lm_AB<-lm(assessment_k~age_factor*FIREPLACE,data=dat.2)
means.ab <- lsmeans(lm_AB, specs = c("age_factor", "FIREPLACE"))
means.a <- lsmeans(lm_AB, specs = c("age_factor"))
means.b <- lsmeans(lm_AB, specs = c("FIREPLACE"))
contrast(means.ab, list(CvOforN=c(1,-1,0,0),CvO = c(.5,-.5,.5,-.5)))
#sample sizes of each group
ss<-with(dat.2,table(age_factor,FIREPLACE))
n.C<-as.numeric(ss[1,])
n.O<-as.numeric(ss[3,])
#let's create weights that sum to 1
w.c<-n.C/sum(n.C)
w.o<-n.O/sum(n.O)
#I've entered numbers by hand to make the code easier to follow but you can also use w.c and w.o defined before
contrast(means.ab, list(wCvO = c(10/126,-53/172,116/126,-119/172)))
#contrast(means.ab, list(wCvO = c(w.c[1],-w.o[1],w.c[2],-w.o[2])))
#Note that the t.ratio^2 = the first row of the summary of aov
6.639^2
ssa<-summary(aov(assessment_k~age_factor*FIREPLACE,data=dat.2))
ssa[[1]]$`F value`[1]
library(car)
#By default, Anova() reports type II SS
Anova(lm_AB)
#equivalent to summary(aov()), sequential (type I) SS
anova(lm_AB)
#Order does not matter!!
# These sums are conditional on the other factor being present in the model.
lm_BA<-lm(assessment_k~FIREPLACE*age_factor,data=dat.2)
Anova(lm_BA)
anova(lm_BA)
Anova.3ss<-Anova(lm(assessment_k~age_factor*FIREPLACE,
contrasts=list(age_factor='contr.sum',FIREPLACE='contr.sum'),data=dat.2),
type='III')
Anova.3ss
#Test for interaction using nested models
#Full model: lm_AB
#Reduced model: lm_AB_add (additive model, no interaction)
lm_AB_add<-lm(assessment_k~age_factor+FIREPLACE,data=dat.2)
#Use anova() to compare the reduced vs the full model
anova(lm_AB_add,lm_AB)
#Compare the F-statistic with that of `aov` based on type I SS (3rd row)
summary(aov(lm_AB))
#Compare the F-statistic with that of `Anova` based on type II SS (3rd row)
Anova(lm_AB)
#Compare the F-statistic with that of `Anova` based on type III SS (3rd row)
Anova.3ss
contrast(means.ab, list(CvO = c(1,-1,1,-1)))
#Compare the square of the t.test with the F from the type III table (second row)
2.402^2
Anova.3ss
lm_B <-lm(assessment_k~FIREPLACE,data=dat.2)
anova(lm_B,lm_AB_add)
#compare this test with that of a type II table for the additive model:
Anova(lm_AB_add)
#or with the result of a contrast
means.ab.add <- lsmeans(lm_AB_add, specs = c("age_factor", "FIREPLACE"))
contrast(means.ab.add, list(CvO = c(1,-1,1,-1)))
#Note that there are 2 different datasets called dat.2 in this document
set.seed(12134)
dat.rs<-dat[sample(1:nrow(dat),500),]
dat.2<-dat.rs %>% filter(age_factor%in%c("C","O")) %>%
droplevels()
nobs<-nrow(dat.2)
str(dat.2)
g<-ggplot(data=dat.2,aes(BLDG_METRE, assessment_k))+geom_point()+
geom_smooth(method="lm",se=FALSE)+xlab("building size (mts,continuous)")
g
lm_ageBLDG<-lm(assessment_k~BLDG_METRE*age_factor,data=dat.2)
#fit a linear model to each subset data and compare the results!
lm_BLDG_C<-lm(assessment_k~BLDG_METRE,data=subset(dat.2,age_factor=="C"))
lm_BLDG_O<-lm(assessment_k~BLDG_METRE,data=subset(dat.2,age_factor=="O"))
#compare coefficients tables:
tidy(lm_ageBLDG)
tidy(lm_BLDG_C)
tidy(lm_BLDG_O)
#Reference level
b1_C<-tidy(lm_ageBLDG) %>%
filter(term == "BLDG_METRE") %>%
select(estimate)%>% as.numeric
b0_C<-tidy(lm_ageBLDG) %>%
filter(term == "(Intercept)") %>%
select(estimate) %>% as.numeric
#other level
b1_O<-as.numeric(tidy(lm_ageBLDG) %>%
filter(term == "BLDG_METRE:age_factorO") %>%
select(estimate)%>% as.numeric)+b1_C
b0_O<-as.numeric(tidy(lm_ageBLDG) %>%
filter(term == "age_factorO") %>%
select(estimate)%>% as.numeric)+b0_C
#plot with age_factor colors
#Note: the lines added by geom_smooth when color=age_factor are not
# same as those estimated with an interaction term in `lm` (???)
g<-ggplot(data=dat.2,aes(BLDG_METRE, assessment_k))+geom_point(data=dat.2,aes(BLDG_METRE, assessment_k,color = age_factor))+
geom_abline(slope=b1_C,intercept = b0_C,col="#F8766D")+
geom_abline(slope=b1_O,intercept =b0_O,col="#00BFC4")+
xlab("building size (mtr,continuous)")
g_zoom<-ggplot(data=dat.2,aes(BLDG_METRE, assessment_k))+
geom_abline(slope=b1_C,intercept = b0_C,col="#F8766D")+
geom_abline(slope=b1_O,intercept =b0_O,col="#00BFC4")+
scale_x_continuous(expand=c(0,0), limits=c(0,500))+
scale_y_continuous(expand=c(0,0), limits=c(-100,1500))+
xlab("building size (mtr,continuous)")
plot_grid(g, g_zoom, align = "h")
lm_ageBLDG_add<-lm(assessment_k~BLDG_METRE+age_factor,data=dat.2)
summary(lm_ageBLDG_add)
#One slope
b1<-tidy(lm_ageBLDG_add) %>%
filter(term == "BLDG_METRE") %>%
select(estimate)%>% as.numeric
#intercept of reference
b0_C<-tidy(lm_ageBLDG_add) %>%
filter(term == "(Intercept)") %>%
select(estimate) %>% as.numeric
#intercept of other level
b0_O<-as.numeric(tidy(lm_ageBLDG_add) %>%
filter(term == "age_factorO") %>%
select(estimate)%>% as.numeric)+b0_C
g_add<-ggplot(data=dat.2,aes(BLDG_METRE, assessment_k))+
geom_point(aes(color=age_factor),size=1)+
geom_abline(slope=b1,intercept = b0_C,col="#F8766D")+
geom_abline(slope=b1,intercept =b0_O,col="#00BFC4")+
scale_x_continuous(expand=c(0,0), limits=c(0,500))+
scale_y_continuous(expand=c(0,0), limits=c(-100,1500))+
xlab("building size (mtr,continuous)")
g_add_zoom<-ggplot(data=dat.2,aes(BLDG_METRE, assessment_k))+
geom_point(aes(color=age_factor),size=1)+
geom_abline(slope=b1,intercept = b0_C,col="#F8766D")+
geom_abline(slope=b1,intercept =b0_O,col="#00BFC4")+
scale_x_continuous(expand=c(0,0), limits=c(0,150))+
scale_y_continuous(expand=c(0,0), limits=c(0,500))+
xlab("building size (mtr,continuous)-ZOOM")
plot_grid(g_add, g_add_zoom, align = "h")
lm_BLDG<-lm(assessment_k~BLDG_METRE,data=dat.2)
tidy(lm_BLDG)
summary(lm_BLDG)
(beta_1 <- cor(x = dat.2$assessment_k, y = dat.2$BLDG_METRE) * sd(dat.2$assessment_k) / sd(dat.2$BLDG_METRE))
(beta_0 <- mean(dat.2$assessment_k) - beta_1 * mean(dat.2$BLDG_METRE))
vals_n_errors <- augment(lm_BLDG) %>%
select(assessment_k, BLDG_METRE, .fitted, .resid)
head(vals_n_errors)
(first_observation <- vals_n_errors[1, ])
# Does rpg - .fitted == .resid
all.equal((first_observation$assessment_k - first_observation$.fitted),
first_observation$.resid)
sd(vals_n_errors$.resid)*sqrt((nobs-1)/(nobs-2))
with(dat.2,sqrt(sum((assessment_k-vals_n_errors$.fitted)^2)/(nobs-2)))
# using confint
(beta_1_ci <- confint(lm_BLDG, 'BLDG_METRE', level = 0.95))
# using formula
b1<-tidy(lm_BLDG) %>%
filter(term == "BLDG_METRE") %>%
select(estimate) %>% as.numeric
b1_se<-tidy(lm_BLDG) %>%
filter(term == "BLDG_METRE") %>%
select(std.error) %>% as.numeric
b1 + c(-1,1) * qt(0.975, nobs - 2) * b1_se
sigma_hat<-sd(vals_n_errors$.resid)*sqrt((nobs-1)/(nobs-2))
predicted_y_se <- sigma_hat * sqrt(1 + (1/nobs) + (dat.2$BLDG_METRE - mean(dat.2$BLDG_METRE))^2 / ((nobs - 1) * (sd(dat.2$BLDG_METRE)^2)))
upr <- lm_BLDG$fitted.values + qt(0.975, nobs - 2) * predicted_y_se
lwr <- lm_BLDG$fitted.values- qt(0.975, nobs - 2) * predicted_y_se
head(prediction_int <- data.frame(lwr, upr))
head(predict.lm(lm_BLDG, interval = "prediction"))
head(predicted_y_se)
head(augment(lm_BLDG)$.se.fit)
upr <- lm_BLDG$fitted.values + qt(0.975, nobs - 2) * augment(lm_BLDG)$.se.fit
lwr <- lm_BLDG$fitted.values - qt(0.975, nobs - 2) * augment(lm_BLDG)$.se.fit
head(predicted_ci_int <- data.frame(lwr, upr))
predicted_fits <- data.frame(predict.lm(lm_BLDG, interval = "confidence", se.fit = TRUE)$fit)
head(predicted_fits)
aov(assessment_k~age_factor,data=dat.balanced)
aov(assessment_k~FIREPLACE*age_factor,data=dat.balanced)
summary(aov(assessment_k~FIREPLACE*age_factor,data=dat.balanced))
knitr::opts_chunk$set(error = TRUE, collapse = TRUE, comment = "#>")
library(tidyverse)
# create the iris_sepal_w  data frame
iris_sepal_w <- select(iris, c(Sepal.Width, Species))
# preview data set
head(iris_sepal_w)
summary(iris_sepal_w)
#the dataset `iris_sepal_w` gives the measurements in centimeters of the variable sepal width for 50 flowers from each of 3 species of iris. The species are Iris setosa, versicolor, and virginica.
# perform an ANOVA
ANOVA_result <- aov(Sepal.Width ~ Species, data = iris_sepal_w)
# display results
summary(ANOVA_result)
# display results
summary(ANOVA_result)
iris_sepal_w <- select(iris, c(Sepal.Width, Species))
LM_result<- lm(Sepal.Width ~ Species, data = iris_sepal_w)
summary(LM_result)
iris_vers_virg <- filter(iris, Species != "setosa") %>%
select(Sepal.Width, Sepal.Length, Species) %>%
droplevels()
LM_result_4<- lm(Sepal.Width ~ Species*Sepal.Length, data = iris_vers_virg)
summary(LM_result_4)
download.file("https://www.kaggle.com/sudalairajkumar/cryptocurrencypricehistory/downloads/bitcoin_dataset.csv", "test.csv", method = "curl")
list.files()
x <- read.csv("test.csv")
library(tidyverse)
getwd()
setwd("~/Dropbox/UBC_MDS/522/labs/bitcoin-analysis/src")
library(tidyverse)
source('~/Dropbox/UBC_MDS/522/labs/bitcoin-analysis/src/test-read-data.R', echo=TRUE)
View(feature)
View(price)
test <- read.csv("../data/bitcoin_price.csv")
test <- read.csv2("../data/bitcoin_price.csv")
View(test)
test <- read.csv("../data/bitcoin_price.csv")
## load the data into R
price <- read_csv("../data/bitcoin_price.csv")
View(price)
str(test)
str(price)
all.equal(price, test)
sum(test$Market.Cap==price$`Market Cap`)
## load the data into R
price <- read_csv("../data/bitcoin_price.csv")
as.numeric(price$`Market Cap`)
price[5,7]
price[5,7]
## load the data into R
price <- read_csv("../data/bitcoin_price.csv")
View(price)
price[1,7]
price[1,7] == 117056000000
## output the data to results folder
write_csv(price, path = "../results/price.csv")
write_csv(feature, path = "../results/feature.csv")
